// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GameOfLife

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int rule;
RWTexture2D<float4> Result;

RWTexture2D<float4> Prev;

[numthreads(8,8,1)]
void GameOfLife (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float4 sum = Prev[id.xy + uint2(1,0)] + Prev[id.xy + uint2(2,0)] + Prev[id.xy + uint2(3,0)] +
    Prev[id.xy + uint2(-1,0)] + Prev[id.xy + uint2(-2,0)] + Prev[id.xy + uint2(-3,0)] +
    Prev[id.xy + uint2(1,1)] + Prev[id.xy + uint2(2,1)] + Prev[id.xy + uint2(3,1)] +
    Prev[id.xy + uint2(1,-1)] + Prev[id.xy + uint2(2,-1)] + Prev[id.xy + uint2(3,-1)] +
    Prev[id.xy + uint2(-1,1)] + Prev[id.xy + uint2(-2,1)] + Prev[id.xy + uint2(-3,1)] +
    Prev[id.xy + uint2(-1,-1)] + Prev[id.xy + uint2(-2,-1)] + Prev[id.xy + uint2(-3,-1)] +
    Prev[id.xy + uint2(0,1)] + Prev[id.xy + uint2(0,2)] + Prev[id.xy + uint2(0,3)] +
    Prev[id.xy + uint2(0,-1)] + Prev[id.xy + uint2(0,-2)] + Prev[id.xy + uint2(0,-3)] +
    Prev[id.xy + uint2(-1,3)] + Prev[id.xy + uint2(1,3)] +
    Prev[id.xy + uint2(-1,-3)] + Prev[id.xy + uint2(1,-3)] +
    Prev[id.xy + uint2(-1,2)] + Prev[id.xy + uint2(1,2)] + Prev[id.xy + uint2(-2,2)] + Prev[id.xy + uint2(2,2)] +
    Prev[id.xy + uint2(-1,-2)] + Prev[id.xy + uint2(1,-2)] + Prev[id.xy + uint2(-2,-2)] + Prev[id.xy + uint2(2,-2)];


    float4 sum2 = Prev[id.xy + uint2(5,0)] + Prev[id.xy + uint2(6,0)] + Prev[id.xy + uint2(7,0)] + Prev[id.xy + uint2(-5,0)] + Prev[id.xy + uint2(-6,0)] + Prev[id.xy + uint2(-7,0)] +
    Prev[id.xy + uint2(5,1)] + Prev[id.xy + uint2(6,1)] + Prev[id.xy + uint2(7,1)] + Prev[id.xy + uint2(-5,1)] + Prev[id.xy + uint2(-6,1)] + Prev[id.xy + uint2(-7,1)] +
    Prev[id.xy + uint2(5,-1)] + Prev[id.xy + uint2(6,-1)] + Prev[id.xy + uint2(7,-1)] + Prev[id.xy + uint2(-5,-1)] + Prev[id.xy + uint2(-6,-1)] + Prev[id.xy + uint2(-7,-1)] +
    Prev[id.xy + uint2(5,2)] + Prev[id.xy + uint2(6,2)] + Prev[id.xy + uint2(7,2)] + Prev[id.xy + uint2(-5,2)] + Prev[id.xy + uint2(-6,2)] + Prev[id.xy + uint2(-7,2)] +
    Prev[id.xy + uint2(5,-2)] + Prev[id.xy + uint2(6,-2)] + Prev[id.xy + uint2(7,-2)] + Prev[id.xy + uint2(-5,-2)] + Prev[id.xy + uint2(-6,-2)] + Prev[id.xy + uint2(-7,-2)] +
    Prev[id.xy + uint2(0,5)] + Prev[id.xy + uint2(0,6)] + Prev[id.xy + uint2(0,7)] + Prev[id.xy + uint2(0,-5)] + Prev[id.xy + uint2(0,-6)] + Prev[id.xy + uint2(0,-7)] +
    Prev[id.xy + uint2(1,5)] + Prev[id.xy + uint2(1,6)] + Prev[id.xy + uint2(1,7)] + Prev[id.xy + uint2(1,-5)] + Prev[id.xy + uint2(1,-6)] + Prev[id.xy + uint2(1,-7)] +
    Prev[id.xy + uint2(-1,5)] + Prev[id.xy + uint2(-1,6)] + Prev[id.xy + uint2(-1,7)] + Prev[id.xy + uint2(-1,-5)] + Prev[id.xy + uint2(-1,-6)] + Prev[id.xy + uint2(-1,-7)] +
    Prev[id.xy + uint2(2,5)] + Prev[id.xy + uint2(2,6)] + Prev[id.xy + uint2(2,7)] + Prev[id.xy + uint2(2,-5)] + Prev[id.xy + uint2(2,-6)] + Prev[id.xy + uint2(2,-7)] +
    Prev[id.xy + uint2(-2,5)] + Prev[id.xy + uint2(-2,6)] + Prev[id.xy + uint2(-2,7)] + Prev[id.xy + uint2(-2,-5)] + Prev[id.xy + uint2(-2,-6)] + Prev[id.xy + uint2(-2,-7)] +
    Prev[id.xy + uint2(3,4)] + Prev[id.xy + uint2(3,5)] + Prev[id.xy + uint2(3,6)] + Prev[id.xy + uint2(3,-4)] + Prev[id.xy + uint2(3,-5)] + Prev[id.xy + uint2(3,-6)] +
    Prev[id.xy + uint2(4,3)] + Prev[id.xy + uint2(4,4)] + Prev[id.xy + uint2(4,5)] + Prev[id.xy + uint2(4,6)] + Prev[id.xy + uint2(4,-3)] + Prev[id.xy + uint2(4,-4)] + Prev[id.xy + uint2(4,-5)] + Prev[id.xy + uint2(4,-6)]+
    Prev[id.xy + uint2(5,3)] + Prev[id.xy + uint2(5,4)] + Prev[id.xy + uint2(5,5)] + Prev[id.xy + uint2(5,-3)] + Prev[id.xy + uint2(5,-4)] + Prev[id.xy + uint2(5,-5)] +
    Prev[id.xy + uint2(6,3)] + Prev[id.xy + uint2(6,4)] + Prev[id.xy + uint2(6,-3)] + Prev[id.xy + uint2(6,-4)] +
    Prev[id.xy + uint2(-3,4)] + Prev[id.xy + uint2(-3,5)] + Prev[id.xy + uint2(-3,6)] + Prev[id.xy + uint2(-3,-4)] + Prev[id.xy + uint2(-3,-5)] + Prev[id.xy + uint2(-3,-6)] +
    Prev[id.xy + uint2(-4,3)] + Prev[id.xy + uint2(-4,4)] + Prev[id.xy + uint2(-4,5)] + Prev[id.xy + uint2(-4,6)] + Prev[id.xy + uint2(-4,-3)] + Prev[id.xy + uint2(-4,-4)] + Prev[id.xy + uint2(-4,-5)] + Prev[id.xy + uint2(-4,-6)]+
    Prev[id.xy + uint2(-5,3)] + Prev[id.xy + uint2(-5,4)] + Prev[id.xy + uint2(-5,5)] + Prev[id.xy + uint2(-5,-3)] + Prev[id.xy + uint2(-5,-4)] + Prev[id.xy + uint2(-5,-5)] +
    Prev[id.xy + uint2(-6,3)] + Prev[id.xy + uint2(-6,4)] + Prev[id.xy + uint2(-6,-3)] + Prev[id.xy + uint2(-6,-4)];


    float val2 = sum.w / 36;
    float val1 = sum2.w / 108;

    int currentVal = Prev[id.xy].x;
    int color = 0;

    if( rule == 0)
    {
        if( val1 >= 0.210 &&  val1 <= 0.220 ) { currentVal = 1.0; color = 0.1; }
        if( val1 >= 0.350 &&  val1 <= 0.500 ) { currentVal = 0.0; color = 0.2; }
        if( val1 >= 0.750 &&  val1 <= 0.850 ) { currentVal = 0.0; color = 0.4;}
        if( val2 >= 0.100 &&  val2 <= 0.280 ) { currentVal = 0.0;  color = 0.6;}
        if( val2 >= 0.430 &&  val2 <= 0.550 ) { currentVal = 1.0; color = 0.8;}
        if( val1 >= 0.120 &&  val1 <= 0.150 ) { currentVal = 0.0; color = 1;}

    }
    else
    {
        if( val1 >= 0.185 &&  val1 <= 0.200 ) { currentVal = 1.0; }
        if( val1 >= 0.350 &&  val1 <= 0.580 ) { currentVal = 0.0; }
        if( val1 >= 0.750 &&  val1 <= 0.850 ) { currentVal = 0.0; }
        if( val2 >= 0.150 &&  val2 <= 0.280 ) { currentVal = 0.0; }
        if( val2 >= 0.445 &&  val2 <= 0.680 ) { currentVal = 1.0; }
        if( val1 >= 0.150 &&  val1 <= 0.180 ) { currentVal = 0.0; }
    }


    
    

    Result[id.xy] = float4(255*currentVal, 255*currentVal, 255*currentVal, currentVal);
}
